name: Build

on:
  push:
    paths:
      - '.github/**'
      - 'CI/**' 
      - 'src/**'

jobs:
  configure:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      matrix_linux: ${{ steps.configure.outputs.matrix_linux }}
      matrix_windows: ${{ steps.configure.outputs.matrix_windows }}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - uses: actions/checkout@v2
        with:
          repository: BITERP/ci_scripts
          token: ${{secrets.IPALENOV_GHTOKEN}}
          path: CI/ci_scripts

      - name: configure components
        id: configure
        run: python3 CI/ci_scripts/build_addins.py configure ${{ github.event.before }} ${{ github.event.after }}
        env:
          YC_TOKEN: ${{ secrets.YC_DEVOPS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.IPALENOV_GHTOKEN }}


  buildLinux:
    runs-on: buildaddin-prmq-${{github.run_number}}
    needs: configure
    if: needs.configure.outputs.matrix_linux != ''
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.configure.outputs.matrix_linux)}}
    name: Linux ${{matrix.component}} ${{matrix.version}}
    steps:
      - uses: actions/checkout@v2

      - run: mkdir ${{matrix.buildDir}}

      - name: Configure CMake.
        working-directory: ${{matrix.buildDir}}
        run: cmake -DCMAKE_BUILD_TYPE=Release -DVERSION=${{matrix.version}} ..

      - name: Build
        working-directory: ${{matrix.buildDir}}
        run: cmake --build .

      - name: base64-to-file
        uses: narcodico/base64-to-path@v1
        with:
          filePath: ${{matrix.buildDir}}/test.conf
          encodedString: ${{secrets.TEST_CONF}}

      - name: Test
        working-directory: ${{matrix.buildDir}}
        run: ctest .

      - name: Rename Library
        if: matrix.sourceLinuxLibrary != ''
        working-directory: ${{matrix.buildDir}}
        run: mv ${{matrix.sourceLinuxLibrary}} ${{matrix.linuxLibrary}}

      - name: Upload Linux Library
        uses: actions/upload-artifact@v2.2.3
        with:
          name: ${{matrix.linuxLibrary}}
          path: ${{matrix.buildDir}}/${{matrix.linuxLibrary}}
          if-no-files-found: error
          retention-days: 1

  buildWindows:
    runs-on: windows-latest
    needs: [configure, buildLinux]
    if: always() && needs.configure.outputs.matrix_windows != ''
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.configure.outputs.matrix_windows)}}
    name: Windows ${{matrix.component}} ${{matrix.version}}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: BITERP/ci_scripts
          token: ${{secrets.IPALENOV_GHTOKEN}}
          path: CI/ci_scripts

      - name: Download Linux Library
        if: matrix.linuxLibrary != ''
        uses: actions/download-artifact@v2.0.9
        with:
          name: ${{matrix.linuxLibrary}}
          path: ${{matrix.packagePath}}/

      - name: Remove Linux Artifact
        if: matrix.linuxLibrary != ''
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{matrix.linuxLibrary}}

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
    
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1

      - name: base64-to-file
        uses: narcodico/base64-to-path@v1
        with:
          filePath: ${{matrix.buildDir}}/tests/test.conf
          encodedString: ${{secrets.TEST_CONF}}

      - name: Test
        working-directory: ${{matrix.buildDir}}
        run: msbuild ${{matrix.buildFile}} -t:${{matrix.testTarget}}

      - name: Build
        working-directory: ${{matrix.buildDir}}
        run: msbuild ${{matrix.buildFile}} -t:${{matrix.releaseTarget}} -p:VERSION=${{matrix.version}}

      - name: Release
        if: matrix.release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: addins_${{matrix.component}}_${{github.run_number}}
          name: '[DEV] ${{matrix.component}} v${{matrix.version}}'
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          artifacts: ${{matrix.location}}/${{matrix.out}}
          commit: ${{github.ref}}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            [Новое в версии](https://github.com/BITERP/PinkRabbitMQ/blob/master/CHANGELOG.md)

            ${{ github.event.head_commit.message }}

            [Лог сборки](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})

      - name: Notify
        if: always() && matrix.release
        run: python3 -m pip install PyYAML && python3 CI/ci_scripts/notify.py ${{steps.release.outcome}} ${{steps.release.outputs.html_url}}
        env:
          YC_TOKEN: ${{ secrets.YC_DEVOPS_TOKEN }}
  
  cleanLinux:
    runs-on: ubuntu-latest
    needs: [configure, buildLinux]
    if: always()
    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: BITERP/ci_scripts
          token: ${{secrets.IPALENOV_GHTOKEN}}
          path: CI/ci_scripts

      - name: Clean Linux VM
        run: python3 CI/ci_scripts/build_addins.py clean
        env:
          YC_TOKEN: ${{ secrets.YC_DEVOPS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.IPALENOV_GHTOKEN }}
